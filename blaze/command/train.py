""" Implements the commands for training """
import multiprocessing

from blaze.config.environment import EnvironmentConfig
from blaze.config.train import TrainConfig
from blaze.logger import logger as log

from . import command

@command.description('Trains a model to generate push policies for the given page')
@command.argument('name', help='The name of the experiment')
@command.argument('--dir', help='The location to save the model', required=True)
@command.argument('--model', help='The RL technique to use while training', default='APEX', choices=['APEX'])
@command.argument('--cpus', help='Number of CPUs to use for training', default=multiprocessing.cpu_count(), type=int)
@command.argument('--timesteps', help='Maximum number of timesteps to train for', default=10000000, type=int)
@command.argument('--website', help='A description of the website that should be trained. This should be a file \
  generated by `blaze preprocess`', required=True)
@command.command
def train(args):
  """ Implements training for a webpage """
  log.info('starting train', name=args.name, model=args.model)
  if args.model == 'APEX':
    from blaze.model import apex as model
  train_config = TrainConfig(
    experiment_name=args.name,
    model_dir=args.dir,
    num_cpus=args.cpus,
    max_timesteps=args.timesteps,
  )
  env_config = EnvironmentConfig.load_file(args.website)
  model.train(train_config, env_config)
